#!/bin/bash

: ${GPG:=gpg}
: ${OPENSSL:=openssl}
: ${VAULT_PASSWORD_FILE:=.vault-password.gpg}

export GPG
export OPENSSL
export VAULT_PASSWORD_FILE
export PAGER=cat

trap 'rm -f $TMPFILES' EXIT

die () {
	echo "ERROR: $*" >&2
	exit 1
}

usage () {
	echo "${0##*/}: usage: ${0##*/} ( help | init | encrypt | decrypt | cat <file> )"
}

do_encrypt () {
	tmpfile=$(mktemp cryptXXXXXX)
	trap 'rm -f $tmpfile' EXIT

	cat > $tmpfile

	ansible-vault encrypt $tmpfile || exit 1

	cat $tmpfile
	rm $tmpfile
}

decrypt_and_view () {
	errfile=$(mktemp errXXXXXX)
	TMPFILES="$errfile $TMPFILES"

	if ! ansible-vault view "$1" 2> $errfile; then
		if grep -q 'is not encrypted' $errfile; then
			cat "$1"
		else
			cat $errfile
			exit 1
		fi
	fi
}

do_decrypt () {
	tmpfile=$(mktemp cryptXXXXXX)
	TMPFILES="$tmpfile $TMPFILES"

	cat > $tmpfile
	decrypt_and_view $tmpfile
}

do_cat () {
	decrypt_and_view "$1"
}

read_vault_password () {
	local _rc=0

	if [ "$_generate" = 1 ]; then
		if ! ${OPENSSL} rand -hex $_keysize; then
			_rc=1
		else
			echo "generated $_keysize bit key in $VAULT_PASSWORD_FILE" >&2
		fi
	elif tty > /dev/null; then
		while :; do
			echo "Enter a vault password: " > /dev/tty
			read password1 < /dev/tty
			echo "Enter a vault password (confirm): " > /dev/tty
			read password2 < /dev/tty

			[ "$password1" = "$password2" ] && break
			echo "Passwords do not match." > /dev/tty
		done
		echo "$password1"
	else
		cat
	fi

	return $_rc
}

do_init() {
	local _generate=0
	local _force=0
	local _keysize=512

	while getopts 'gk:f' ch; do
		case $ch in
		(g) _generate=1;;
		(k) _keysize=$OPTARG;;
		(f) _force=1;;
		esac
	done
	shift $(( OPTIND - 1 ))

	cd $TOPDIR

	if [ ! -f ${VAULT_PASSWORD_FILE} ] || [ "$_force" = 1 ]; then
		read_vault_password $tmpfile | ${GPG} -e -o ${VAULT_PASSWORD_FILE} --batch --yes
	else
		echo "Found existing $VAULT_PASSWORD_FILE"
	fi

	errfile=$(mktemp errXXXXXX)
	TMPFILES="$errfile $TMPFILES"

	if ! ansible localhost -m ini_file \
		-a "dest=ansible.cfg
		    section=defaults
		    option=vault_password_file
		    value='${0%/*}/gpgvault-get-password'" > $errfile 2>&1; then

		cat $errfile >&2
		die "failed to configure vault password in ansible.cfg"

	fi


	if ! grep -q '^\*.vault' .gitattributes 2> /dev/null; then
		echo "*.vault diff=vault" >> .gitattributes
	fi
	git config diff.vault.textconv "$0 cat"

	echo "Initialized gpgvault in $TOPDIR"
}

cmd=$1
shift

git rev-parse || die "gpgvault needs to be run inside a git repository"
TOPDIR=$(git rev-parse --show-toplevel)

case "$cmd" in
	(init)
		do_init "$@";;

	(encrypt)
		do_encrypt "$@";;

	(decrypt)
		do_decrypt "$@";;

	(cat)
		do_cat "$@";;

	(help)	usage
		exit 0
		;;

	(*)	usage >&2
		exit 2
		;;

esac
