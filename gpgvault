#!/bin/sh

: ${GPG:=gpg}
: ${VAULT_PASSWORD_FILE:=.vault-password.gpg}

export GPG
export VAULT_PASSWORD_FILE
export PAGER=cat

trap 'rm -f $TMPFILES' EXIT

die () {
	echo "ERROR: $*" >&2
	exit 1
}

usage () {
	echo "${0##*/}: usage: ${0##*/} ( help | init | encrypt | decrypt | cat <file> )"
}

do_encrypt () {
	tmpfile=$(mktemp cryptXXXXXX)
	trap 'rm -f $tmpfile' EXIT

	cat > $tmpfile

	ansible-vault encrypt $tmpfile || exit 1

	cat $tmpfile
	rm $tmpfile
}

decrypt_and_view () {
	errfile=$(mktemp errXXXXXX)
	TMPFILES="$errfile $TMPFILES"

	if ! ansible-vault view "$1" 2> $errfile; then
		if grep -q 'is not encrypted' $errfile; then
			cat "$1"
		else
			cat $errfile
			exit 1
		fi
	fi
}

do_decrypt () {
	tmpfile=$(mktemp cryptXXXXXX)
	TMPFILES="$tmpfile $TMPFILES"

	cat > $tmpfile
	decrypt_and_view $tmpfile
}

do_cat () {
	decrypt_and_view "$1"
}

do_init() {
	cd $TOPDIR

	if [ ! -f ${VAULT_PASSWORD_FILE} ]; then
		if tty > /dev/null; then
			while :; do
				echo "Enter a vault password: "
				read password1
				echo "Enter a vault password (confirm): "
				read password2

				[ "$password1" = "$password2" ] && break
				echo "Passwords do not match."
			done
			echo "$password1" | gpg -e -o ${VAULT_PASSWORD_FILE}
		else
			gpg -e -o ${VAULT_PASSWORD_FILE}
		fi
	else
		echo "Found existing $VAULT_PASSWORD_FILE"
	fi

	ansible localhost -m ini_file \
		-a "dest=ansible.cfg
		    section=defaults
		    option=vault_password_file
		    value='${0%/*}/gpgvault-get-password'"

	if ! grep -q '^\*.vault' .gitattributes; then
		echo "*.vault diff=vault" >> .gitattributes
	fi
	git config diff.vault.textconv "$0 cat"

	echo "Initialized gpgvault in $TOPDIR"
}

cmd=$1
shift

git rev-parse || die "gpgvault needs to be run inside a git repository"
TOPDIR=$(git rev-parse --show-toplevel)

case "$cmd" in
	(init)
		do_init;;
	(encrypt)
		do_encrypt;;
	(decrypt)
		do_decrypt;;
	(cat)	do_cat "$@";;

	(help)	usage
		exit 0
		;;

	(*)	usage >&2
		exit 2
		;;
esac

